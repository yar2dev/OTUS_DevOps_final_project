---
image: alpine:latest


stages:
  - build
  - test
  - review
  - release
  - cleanup
  - staging
  - deploy_trigger
  

build:
  stage: build
  image: docker:git
  services:
    - docker:18.09.7-dind
  script:
    - setup_docker
    - build
  variables:
    DOCKER_DRIVER: overlay2
  only:
    - branches

test:
  stage: test
  script:
    - exit 0
  only:
    - branches

release:
  stage: release
  image: docker
  services:
    - docker:18.09.7-dind
  script:
    - setup_docker
    - release
  only:
    - master


review:
  stage: review
  script:
    - install_dependencies
    - ensure_namespace
    - deploy
  variables:
    KUBE_NAMESPACE: review
    host: $CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG
  environment:
    name: review/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME
    url: http://$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG
    on_stop: stop_review
  only:
    refs:
      - branches
    kubernetes: active
  except:
    - master

stop_review:
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  script:
    - install_dependencies
    - delete
  environment:
    name: review/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  allow_failure: true
  only:
    refs:
      - branches
    kubernetes: active
  except:
    - master

deploy_trigger:
  stage: deploy_trigger
  script:
    - apk add curl
    - "curl -X POST -F token=$CI_DEPLOY_TOKEN -F ref=master http://gitlab.yar2.space/api/v4/projects/1/trigger/pipeline"
  only:
    refs:
      - master
   



staging:
  stage: staging
  image: alpine:latest
  variables:
    KUBE_NAMESPACE: staging
    RMQ_PASSWORD: crawler_pass
    MONGO_PORT: "27017"
    host: $CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG
    CI_APPLICATION_TAG: $CI_COMMIT_REF_SLUG
    name: $CI_ENVIRONMENT_SLUG
  environment:
    name: staging
    url: http://staging

  before_script:
    # installing dependencies
    - apk add -U openssl curl tar gzip bash ca-certificates git
    - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    - chmod 700 get_helm.sh
    - ./get_helm.sh
    - helm version --client
    - curl  -o /usr/bin/sync-repo.sh https://raw.githubusercontent.com/kubernetes/helm/master/scripts/sync-repo.sh
    - chmod a+x /usr/bin/sync-repo.sh
    - curl -L -o /usr/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x /usr/bin/kubectl
    - kubectl version --client
    - kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
      
  script:
    - export track="${1-stable}"
    - >
      if [[ "$track" != "stable" ]]; then
        name="$name-$track"
      fi

    - echo "Clone deploy repository..."
    - git clone https://github.com/yar2dev/OTUS_DevOps_final_project.git
    - cd OTUS_DevOps_final_project/microservices/Charts
    - echo "Deploy helm release $name to $KUBE_NAMESPACE"
    - helm repo add bitnami https://charts.bitnami.com/bitnami
    
    #- echo "helm upgrade --install --wait --set ui.ingress.host="$host" --set $CI_PROJECT_NAME.image.tag="$CI_APPLICATION_TAG" --namespace="$KUBE_NAMESPACE" --version="$CI_PIPELINE_ID-$CI_JOB_ID" "$name" reddit-deploy/reddit/"

    - helm uninstall --wait $CI_COMMIT_REF_SLUG-mongodb --namespace="$KUBE_NAMESPACE" || echo "mongodb is not installed"
    - helm uninstall --wait $CI_COMMIT_REF_SLUG-rabbitmq --namespace="$KUBE_NAMESPACE" || echo "rabbitmq is not installed"
    - helm uninstall --wait $CI_COMMIT_REF_SLUG-$CI_PROJECT_NAME --namespace="$KUBE_NAMESPACE" || echo "crawler is not installed"

    - >
      helm install \
        --wait \
        --set auth.enabled="false"
        --namespace "$KUBE_NAMESPACE" \
        $CI_COMMIT_REF_SLUG-mongodb \
        bitnami/mongodb 
    
    - >
      helm install \
        --wait \
        --set auth.password="$RMQ_PASSWORD" \
        --namespace="$KUBE_NAMESPACE" \
        "$CI_COMMIT_REF_SLUG-rabbitmq" \
        bitnami/rabbitmq

    - >
      helm install \
        --wait \
        --set MONGO="$CI_COMMIT_REF_SLUG-mongodb" \
        --set MONGO_PORT="$MONGO_PORT" \
        --set RMQ_HOST="$CI_COMMIT_REF_SLUG-rabbitmq-headless" \
        --set RMQ_QUEUE="$CI_COMMIT_REF_SLUG-quenue" \
        --set RMQ_USERNAME="user" \
        --set RMQ_PASSWORD="$RMQ_PASSWORD" \
        --set CHECK_INTERVAL="10" \
        --set EXCLUDE_URLS=".*github.com" \
        --set $CI_PROJECT_NAME.image.tag="$CI_APPLICATION_TAG" \
        --namespace="$KUBE_NAMESPACE" \
        --version="$CI_PIPELINE_ID-$CI_JOB_ID" \
        "$CI_COMMIT_REF_SLUG-crawler" \
        ./$CI_PROJECT_NAME

  only:
    refs:
      - master
    
  except: 
    - triggers

.auto_devops: &auto_devops |
  [[ "$TRACE" ]] && set -x
  export CI_REGISTRY="index.docker.io"
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_USER/$CI_PROJECT_NAME
  export CI_APPLICATION_TAG=$CI_COMMIT_REF_SLUG
  export CI_CONTAINER_NAME=ci_job_build_${CI_JOB_ID}


  function deploy() {
    track="${1-stable}"
    name="$CI_ENVIRONMENT_SLUG"

    if [[ "$track" != "stable" ]]; then
      name="$name-$track"
    fi

    echo "Clone deploy repository..."
    git clone http://gitlab.yar2.space/$CI_PROJECT_NAMESPACE/reddit-deploy.git

    echo "Download helm dependencies......."
    helm dep update reddit-deploy/reddit

    echo "Deploy helm release $name to $KUBE_NAMESPACE"
    helm upgrade --install \
      --wait \
      --set ui.ingress.host="$host" \
      --set $CI_PROJECT_NAME.image.tag=$CI_APPLICATION_TAG \
      --namespace="$KUBE_NAMESPACE" \
      --version="$CI_PIPELINE_ID-$CI_JOB_ID" \
      "$name" \
      reddit-deploy/reddit/

  }

  function install_dependencies() {

    apk add -U openssl curl tar gzip bash ca-certificates git

    curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    helm version --client

    curl  -o /usr/bin/sync-repo.sh https://raw.githubusercontent.com/kubernetes/helm/master/scripts/sync-repo.sh
    chmod a+x /usr/bin/sync-repo.sh

    curl -L -o /usr/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/v1.19.15/bin/linux/amd64/kubectl
    chmod +x /usr/bin/kubectl
    kubectl version --client
  }

  function setup_docker() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi
  }

  function ensure_namespace() {
    kubectl version
    kubectl config get-contexts
    kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
  }

  function release() {

    echo "Updating docker images ...."

    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
      echo ""
    fi

    docker pull "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
    docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" "$CI_APPLICATION_REPOSITORY:$(cat VERSION)"
    docker push "$CI_APPLICATION_REPOSITORY:$(cat VERSION)"
    echo ""
  }

  function build() {

    echo "Building Dockerfile-based application..."
    echo `git show --format="%h" HEAD | head -1` > build_info.txt
    echo `git rev-parse --abbrev-ref HEAD` >> build_info.txt
    echo $CI_APPLICATION_REPOSITORY
    echo $CI_APPLICATION_TAG
    docker build -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .

    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
      echo ""
    fi

    echo "Pushing to GitLab Container Registry..."
    docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
    echo ""
  }


  
  function delete() {
    track="${1-stable}"
    name="$CI_ENVIRONMENT_SLUG"
    helm delete "$name" --purge || true
  }



before_script:
  - *auto_devops
...
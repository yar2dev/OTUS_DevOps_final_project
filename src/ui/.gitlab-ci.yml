---
image: alpine:latest


stages:
  - build
  - test
  - release
  - staging
  - production
  

build:
  stage: build
  image: docker:git
  services:
    - docker:18.09.7-dind
  script:
    - setup_docker
    - build
  variables:
    DOCKER_DRIVER: overlay2
  only:
    - branches

unit_test:
  stage: test
  image: docker
  services:
    - docker:18.09.7-dind
  script:
    - setup_docker
    - unit_test
  variables:
    KUBE_NAMESPACE: test

coverage_test:
  stage: test
  image: docker
  services:
    - docker:18.09.7-dind
  script:
    - setup_docker
    - coverage_test
  variables:
    KUBE_NAMESPACE: test

release:
  stage: release
  image: docker
  services:
    - docker:18.09.7-dind
  script:
    - setup_docker
    - release
  only:
    - master




staging:
  stage: staging
  image: alpine:latest
  variables:
    KUBE_NAMESPACE: staging
    MONGO_PORT: "27017"
    host: $CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG
    CI_APPLICATION_TAG: $CI_COMMIT_REF_SLUG
    name: $CI_ENVIRONMENT_SLUG
    domain: http://staging.yar2.space
  environment:
    name: staging
  script:
    - setup_docker
    - deploy
  only:
    refs:
      - master



production:
  stage: production
  image: alpine:latest
  variables:
    KUBE_NAMESPACE: production
    RMQ_PASSWORD: crawler_pass
    MONGO: srv-mongodb
    MONGO_PORT: "27017"
    domain: http://app.yar2.space
    host: $CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG
    CI_APPLICATION_TAG: $CI_COMMIT_REF_SLUG
    name: $CI_ENVIRONMENT_SLUG
  environment:
    name: production
  script:
    - install_dependencies
    - deploy_production
  only:
    refs:
      - master    
  when: manual




.auto_devops: &auto_devops |
  [[ "$TRACE" ]] && set -x
  export CI_REGISTRY="index.docker.io"
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_USER/$CI_PROJECT_NAME
  export CI_APPLICATION_TAG=$CI_COMMIT_REF_SLUG
  export CI_CONTAINER_NAME=ci_job_build_${CI_JOB_ID}


  function unit_test() {
  
  echo `docker run $DOCKER_REGISTRY_USER/crawler:latest python -m unittest discover -s tests/ `

  }


  function coverage_test() {
  
  echo `docker run $CI_APPLICATION_REPOSITORY:$(cat VERSION) coverage run -m unittest discover -s tests/ `
  
  echo `docker run $CI_APPLICATION_REPOSITORY:$(cat VERSION) coverage report --include ui/ui.py`
  }



  function deploy() {
    
    apk add -U openssl curl tar gzip bash ca-certificates git
    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    chmod 700 get_helm.sh
    ./get_helm.sh
    helm version --client
    curl  -o /usr/bin/sync-repo.sh https://raw.githubusercontent.com/kubernetes/helm/master/scripts/sync-repo.sh
    chmod a+x /usr/bin/sync-repo.sh
    curl -L -o /usr/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    chmod +x /usr/bin/kubectl
    kubectl version --client
    kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"


    export track="${1-stable}"
    
      if [[ "$track" != "stable" ]]; then
        name="$name-$track"
      fi

    echo "Clone deploy repository..."
    git clone https://github.com/yar2dev/OTUS_DevOps_final_project.git
    cd OTUS_DevOps_final_project/microservices/Charts
    echo "Deploy helm release $name to $KUBE_NAMESPACE"
  
    helm uninstall --wait $CI_COMMIT_REF_SLUG-$CI_PROJECT_NAME --namespace="$KUBE_NAMESPACE" || echo "crawler is not installed"



  
    helm install \
      --wait \
      --set MONGO="$CI_COMMIT_REF_SLUG-mongodb" \
      --set MONGO_PORT="$MONGO_PORT" \
      --set image_tag="$tag" \
      --set URL=$domain \
      --namespace="$KUBE_NAMESPACE" \
      --version="$CI_PIPELINE_ID-$CI_JOB_ID" \
      "$CI_COMMIT_REF_SLUG-$CI_PROJECT_NAME" \
      ./$CI_PROJECT_NAME

  }


  function deploy_production() {
    
    apk add -U openssl curl tar gzip bash ca-certificates git
    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    chmod 700 get_helm.sh
    ./get_helm.sh
    helm version --client
    curl  -o /usr/bin/sync-repo.sh https://raw.githubusercontent.com/kubernetes/helm/master/scripts/sync-repo.sh
    chmod a+x /usr/bin/sync-repo.sh
    curl -L -o /usr/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    chmod +x /usr/bin/kubectl
    kubectl version --client
    kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"


    export track="${1-stable}"
    
      if [[ "$track" != "stable" ]]; then
        name="$name-$track"
      fi

    echo "Clone deploy repository..."
    git clone https://github.com/yar2dev/OTUS_DevOps_final_project.git
    cd OTUS_DevOps_final_project/microservices/app
 
    kubectl rollout restart -f ui-deploy.yaml --namespace "$KUBE_NAMESPACE" || kubectl apply -f ui-deploy.yaml --namespace "$KUBE_NAMESPACE"

  }




  function install_dependencies() {

    apk add -U openssl curl tar gzip bash ca-certificates git

    curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    helm version --client

    curl  -o /usr/bin/sync-repo.sh https://raw.githubusercontent.com/kubernetes/helm/master/scripts/sync-repo.sh
    chmod a+x /usr/bin/sync-repo.sh

    curl -L -o /usr/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/v1.19.15/bin/linux/amd64/kubectl
    chmod +x /usr/bin/kubectl
    kubectl version --client
  }

  function setup_docker() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi
  }

  function ensure_namespace() {
    kubectl version
    kubectl config get-contexts
    kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
  }

  function release() {

    echo "Updating docker images ...."

    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
      echo ""
    fi

    docker pull "$CI_APPLICATION_REPOSITORY:latest"
    docker tag "$CI_APPLICATION_REPOSITORY:latest" "$CI_APPLICATION_REPOSITORY:$(cat VERSION)"
    docker push "$CI_APPLICATION_REPOSITORY:$(cat VERSION)"
    echo ""
  }

  function build() {

    echo "Building Dockerfile-based application..."
    echo `git show --format="%h" HEAD | head -1` > build_info.txt
    echo `git rev-parse --abbrev-ref HEAD` >> build_info.txt
    echo $CI_APPLICATION_REPOSITORY
    echo $CI_APPLICATION_TAG
    docker build -t "$CI_APPLICATION_REPOSITORY:latest" .

    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
      echo ""
    fi

    echo "Pushing to GitLab Container Registry..."
    docker push "$CI_APPLICATION_REPOSITORY:latest"
    echo ""
  }


  
  function delete() {
    track="${1-stable}"
    name="$CI_ENVIRONMENT_SLUG"
    helm delete "$name" --purge || true
  }



before_script:
  - *auto_devops
...